name: Reusable Build

on:
  workflow_call:
    inputs:
      image_name:
        description: "The name of the Docker image to build."
        required: true
        type: string
      dockerfile:
        description: "The path to the Dockerfile."
        required: false
        type: string
        default: "Dockerfile"
      target:
        description: "The target build stage from the Dockerfile."
        required: false
        type: string
      push:
        description: "Whether to push the built image."
        required: false
        type: boolean
        default: false
      tags:
        description: "A comma-separated list of tags for the image."
        required: false
        type: string

    outputs:
      image_id:
        description: "The full ID of the built image (e.g., ghcr.io/user/repo:tag)."
        value: ${{ jobs.build.outputs.image_id }}
      image_digest:
        description: "The digest of the pushed image."
        value: ${{ jobs.build.outputs.digest }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: ${{ inputs.push == true }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ inputs.dockerfile }}
          push: ${{ inputs.push }}
          tags: ${{ inputs.tags }}
          # The fix: Appending a version suffix to the cache scope.
          # This invalidates the old cache and creates a new one.
          cache-from: type=gh,scope=${{ github.workflow }}-${{ inputs.image_name }}-v2
          cache-to: type=gh,scope=${{ github.workflow }}-${{ inputs.image_name }}-v2,mode=max
          target: ${{ inputs.target }}
          platforms: linux/amd64

      - name: Set image outputs
        if: ${{ inputs.push == true }}
        id: set-outputs
        run: |
          echo "image_id=${{ inputs.tags }}" >> $GITHUB_OUTPUT
          echo "digest=${{ steps.build-and-push.outputs.digest }}" >> $GITHUB_OUTPUT