name: Pull Request Validation

# This workflow runs on any pull request that targets the 'main' branch.
on:
  pull_request:
    branches: [ main ]

jobs:
  run-tests:
    runs-on: ubuntu-latest # Use a standard GitHub-hosted runner with Docker pre-installed.
    
    steps:
      # Step 1: Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # Step 3: Install all necessary Python dependencies
      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r tests/requirements-dev.txt
          pip install pytest pytest-mock # Install testing-specific dependencies

      # Step 4: Run linting and formatting checks first
      #- name: Lint and Format Check
      #  run: |
      #    # Stop the build if there are Python syntax errors or undefined names
      #    flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      #    # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
      #    flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      #    # Check formatting with black
      #    black --check .

      # Step 5: Run the fast Unit Tests first
      # Use the marker system to run all tests that are NOT marked as 'integration'
      - name: Run Unit Tests
        run: pytest -m "not integration" tests/

      - name: Determine Docker GID
        run: echo "DOCKER_GID=$(stat -c '%g' /var/run/docker.sock)" >> $GITHUB_ENV

      # Step 6: Run the full Integration Tests
      # We set VM_HOST_IP to 127.0.0.1 because in the GitHub Actions runner,
      # the Docker containers and the test script are on the same "machine".
      # Use the marker system to run ONLY tests marked as 'integration'
      - name: Run Integration Tests
        env:
          VM_HOST_IP: 127.0.0.1
          # The DOCKER_GID is now set dynamically by the previous step
        run: pytest -m "integration" -s --log-cli-level=DEBUG tests/