# ----------------------------------------------------------------------------------
# Example Docker Compose file for Nether-bridge
# ----------------------------------------------------------------------------------
# This file provides a standard setup for running the proxy and managed Minecraft
# servers. It is configured to work out-of-the-box using environment variables.
# For detailed documentation, please see the project's README.md file.
# ----------------------------------------------------------------------------------

services:
  # The on-demand Minecraft proxy service
  nether-bridge:
    container_name: nether-bridge
    # For production, it is recommended to replace ':latest' with a specific version tag (e.g., ':1.2.0').
    image: ghcr.io/meek2100/nether-bridge:latest
    restart: unless-stopped
    networks:
      - mc-network
    ports:
      # Default Minecraft Bedrock Edition port.
      - "19132:19132/udp"
      # Default Minecraft Java Edition port (TCP for gameplay, UDP for discovery).
      - "25565:25565/tcp"
      - "25565:25565/udp"
      # Optional: Expose Prometheus metrics on port 8000.
      # - "8000:8000/tcp"
    volumes:
      # Required: Mount the Docker socket to allow the proxy to manage other containers.
      - /var/run/docker.sock:/var/run/docker.sock

      # --- Optional: Mount JSON configuration files ---
      # If you prefer using JSON files over environment variables:
      # 1. Create a directory (e.g., 'config') in the same folder as this file.
      # 2. Copy 'settings.json' and 'servers.json' from the 'examples/' directory into it.
      # 3. Edit the files and then uncomment the two lines below.
      # - ./config/settings.json:/app/settings.json:ro
      # - ./config/servers.json:/app/servers.json:ro
    environment:
      # --- General proxy settings (see README for all options) ---
      # LOG_FORMAT: "console" for human-readable logs, or "json" for production.
      - LOG_FORMAT=console
      - LOG_LEVEL=INFO
      # - NB_IDLE_TIMEOUT=600

      # --- Server Definitions (via environment variables) ---
      # Server 1: Bedrock Survival
      - NB_1_NAME=Bedrock Survival
      - NB_1_SERVER_TYPE=bedrock
      - NB_1_LISTEN_PORT=19132
      - NB_1_CONTAINER_NAME=mc-bedrock
      - NB_1_INTERNAL_PORT=19132

      # Server 2: Java Creative
      - NB_2_NAME=Java Creative
      - NB_2_SERVER_TYPE=java
      - NB_2_LISTEN_PORT=25565
      - NB_2_CONTAINER_NAME=mc-java
      - NB_2_INTERNAL_PORT=25565

  # ----------------------------------------------------------------------------------
  # Managed Minecraft Servers
  # ----------------------------------------------------------------------------------
  # These servers are controlled by Nether-bridge.
  # The `restart: "no"` policy is required for the on-demand logic to work.
  # ----------------------------------------------------------------------------------

  mc-bedrock:
    container_name: mc-bedrock
    image: itzg/minecraft-bedrock-server:latest
    restart: "no"
    networks:
      - mc-network
    environment:
      - EULA=TRUE
      # The server's own idle timeout is disabled, as Nether-bridge handles it.
      - IDLE_TIMEOUT=-1
    volumes:
      # Use a named volume to persist the server world data.
      - mc-bedrock-data:/data

  mc-java:
    container_name: mc-java
    image: itzg/minecraft-server:latest
    restart: "no"
    networks:
      - mc-network
    environment:
      - EULA=TRUE
      - TYPE=PAPER
      - MEMORY=2G
      # The server's own idle timeout is disabled, as Nether-bridge handles it.
      - IDLE_TIMEOUT=-1
    volumes:
      # Use a named volume to persist the server world data.
      - mc-java-data:/data

  # ----------------------------------------------------------------------------------
  # Optional: BedrockConnect for Console Support (Xbox, PlayStation, Switch)
  # ----------------------------------------------------------------------------------
  # BedrockConnect allows consoles on the local network to connect to this server.
  #
  # To enable console support:
  # 1. In the 'nether-bridge' service above:
  #    - Change its 'ports' from "19132:19132/udp" to "19133:19133/udp".
  #    - Change its 'NB_1_LISTEN_PORT' environment variable from 19132 to 19133.
  # 2. Create a folder named 'bedrock-connect-config' next to this file.
  # 3. Inside that folder, create a file named 'servers.json' with this content:
  #    [{"serverName": "My On-Demand Server", "serverAddress": "nether-bridge", "serverPort": 19133}]
  # 4. On the game console, set the primary DNS to the IP address of the computer
  #    running this Docker Compose setup.
  # 5. Finally, uncomment the 'bedrock-connect' service definition below.
  #
  # bedrock-connect:
  #   container_name: bedrock-connect
  #   image: pugmatt/bedrock-connect:latest
  #   restart: unless-stopped
  #   networks:
  #     - mc-network
  #   ports:
  #     # Listens on the default Bedrock port for console clients.
  #     - "19132:19132/udp"
  #   volumes:
  #     # Mounts the configuration file created in step 3.
  #     - ./bedrock-connect-config/servers.json:/app/servers.json:ro
  #   depends_on:
  #     - nether-bridge

# ----------------------------------------------------------------------------------
# Volumes and Networks
# ----------------------------------------------------------------------------------
networks:
  mc-network:
    driver: bridge

volumes:
  mc-bedrock-data:
  mc-java-data: