# tests/docker-compose.tests.yml
services:
  # The on-demand Minecraft proxy service
  nether-bridge:
    # Changed image name for consistency with production, but locally built
    image: nether-bridge:local # Renamed image
    container_name: nether-bridge
    build:
      context: ../
      dockerfile: Dockerfile
    restart: "no" # Explicitly set to 'no' for testing lifecycle control
    networks:
      - mc-network
    ports:
      - "19132:19132/udp"
      - "25565:25565/udp"
      - "25565:25565/tcp"
    volumes:
      # These are default config files, can be mounted for testing specific config scenarios if needed
      # - ../settings.json:/app/settings.json
      # - ../servers.json:/app/servers.json
      - /var/run/docker.sock:/var/run/docker.sock # Required for Docker management
    environment: # Specific env vars for testing (short timeouts)
      - LOG_LEVEL=DEBUG
      - NB_IDLE_TIMEOUT=30
      - NB_PLAYER_CHECK_INTERVAL=5
      - NB_QUERY_TIMEOUT=2
      - NB_SERVER_READY_MAX_WAIT=120 # Still allow enough time for MC server init
      - NB_INITIAL_BOOT_READY_MAX_WAIT=45
      - NB_SERVER_STARTUP_DELAY=2
      - NB_INITIAL_SERVER_QUERY_DELAY=2
      - NB_HEALTHCHECK_STALE_THRESHOLD=10
      - NB_HEARTBEAT_INTERVAL=5
      # Test server definitions (explicitly via env vars for CI/testing clarity)
      - NB_1_NAME=Bedrock Survival
      - NB_1_SERVER_TYPE=bedrock
      - NB_1_LISTEN_PORT=19132
      - NB_1_CONTAINER_NAME=mc-bedrock
      - NB_1_INTERNAL_PORT=19132
      - NB_2_NAME=Java Creative
      - NB_2_SERVER_TYPE=java
      - NB_2_LISTEN_PORT=25565
      - NB_2_CONTAINER_NAME=mc-java
      - NB_2_INTERNAL_PORT=25565
    healthcheck:
      test: ["CMD", "python", "nether_bridge.py", "--healthcheck"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  mc-bedrock:
    image: itzg/minecraft-bedrock-server:latest
    restart: "no"
    container_name: mc-bedrock
    networks:
      - mc-network
    volumes:
      - mc-bedrock-data:/data
    environment:
      - EULA=TRUE
      - VERSION=1.20.81.01 # Pin version for consistent tests
      - DIRECT_DOWNLOAD_URL=https://www.minecraft.net/bedrockdedicatedserver/bin-linux/bedrock-server-1.20.81.01.zip # Pin download URL
      - IDLE_TIMEOUT=-1 # Prevent MC server itself from shutting down

  mc-java:
    image: itzg/minecraft-server:latest
    restart: "no"
    container_name: mc-java
    networks:
      - mc-network
    volumes:
      - mc-java-data:/data
    environment:
      - EULA=TRUE
      - TYPE=FABRIC # Use a specific type for consistency
      - MINECRAFT_VERSION=1.16.5 # Pin version
      - LEVEL_TYPE=FLAT # Faster startup for tests
      - JVM_ARGS=-Xmx512M -Xms512M # Resource limits for tests
      - IDLE_TIMEOUT=-1 # Prevent MC server itself from shutting down
      - ONLINE_MODE=FALSE # Faster startup, no Mojang auth needed for tests
  
  tester:
    # Explicit image name for the tester
    image: tester:local # Renamed image
    # Explicit container name for easy identification and cleanup
    container_name: nether-bridge-tester # Specific container name
    build:
      context: ../
      dockerfile: Dockerfile
      target: testing
    networks:
      - mc-network
    volumes:
      # This mount is handled dynamically by conftest.py for remote Docker,
      # but it needs to exist in the compose file for local Docker Desktop.
      # It mounts the project root to /app inside tester.
      - ../:/app
      # Mount the Docker socket so tests can interact with the daemon
      - /var/run/docker.sock:/var/run/docker.sock
    entrypoint: ""
    command: /bin/bash -c "while true; do sleep 1; done" # Keep container alive for exec
    depends_on:
      nether-bridge:
        condition: service_healthy

networks:
  mc-network:
    driver: bridge

volumes:
  mc-bedrock-data:
  mc-java-data: